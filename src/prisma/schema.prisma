generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

enum ChatRole {
  system
  user
  assistant
  function
}

enum ChatType {
  simple
  data
  mssql
}

enum ConversationStyle {
  creative
  balanced
  precise
}

model ChatMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  isDeleted Boolean  @default(false) @map("is_deleted")
  threadId  String   @map("thread_id")
  userId    String   @map("user_id")
  content   String
  role      ChatRole
  type      String   @default("CHAT_MESSAGE")
  context   String?

  thread ChatThread @relation(fields: [threadId], references: [id])

  @@map("chat_message")
}

model ChatThread {
  id                String            @id @default(uuid())
  name              String
  createdAt         DateTime          @default(now()) @map("created_at")
  userId            String            @map("user_id")
  useName           String            @map("use_name")
  isDeleted         Boolean           @default(false) @map("is_deleted")
  chatType          ChatType
  conversationStyle ConversationStyle
  chatOverFileName  String            @map("chat_over_file_name")
  type              String            @default("CHAT_THREAD")

  messages  ChatMessage[]
  documents ChatDocument[]

  @@map("chat_thread")
}

model ChatDocument {
  id           String   @id @default(uuid())
  name         String
  createdAt    DateTime @default(now()) @map("created_at")
  userId       String   @map("user_id")
  isDeleted    Boolean  @default(false) @map("is_deleted")
  chatThreadId String   @map("chat_thread_id")
  type         String   @default("CHAT_DOCUMENT") @map("type")

  blob        Bytes
  textContent String @map("text_content")

  thread     ChatThread          @relation(fields: [chatThreadId], references: [id])
  embeddings DocumentEmbedding[]

  @@map("chat_document")
}

model DocumentEmbedding {
  id            String                       @id @default(uuid())
  content       String
  contentLength Int                          @map("content_length")
  contentTokens Int                          @map("content_tokens")
  embedding     Unsupported("vector(1536)")?
  fileName      String                       @map("file_name")

  document   ChatDocument @relation(fields: [documentId], references: [id])
  documentId String       @map("document_id")

  @@map("document_embedding")
}

model MessageAudit {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  threadId String @map("thread_id")
  userId   String @map("user_id")

  provider String
  model    String

  promptTokens   Int @map("prompt_tokens")
  responseTokens Int @map("response_tokens")

  promptMessage   String @map("prompt_message")
  responseMessage String @map("response_message")

  @@map("message_audit")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Config {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  key   String @unique
  value Json

  @@map("config")
}
